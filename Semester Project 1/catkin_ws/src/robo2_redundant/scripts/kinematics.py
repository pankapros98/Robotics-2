# The following code was compiled by Kapros Panagiotis and Alkiviadis Panagiotis Michailitsis Copyright 2022

#!/usr/bin/env python3

"""
Compute state space kinematic matrices for xArm7 robot arm (5 links, 7 joints)
"""

import numpy as np

class xArm7_kinematics():

    def __init__(self):

        self.l1 = 0.267
        self.l2 = 0.293
        self.l3 = 0.0525
        self.l4 = 0.3512
        self.l5 = 0.1232

        self.theta1 = 0.2225 #(rad) (=12.75deg)
        self.theta2 = 0.6646 #(rad) (=38.08deg)

        pass

    def compute_jacobian(self, r_joints_array):

        q1 = r_joints_array[0]
        q2 = r_joints_array[1]
        q3 = r_joints_array[2]
        q4 = r_joints_array[3]
        q5 = r_joints_array[4]
        q6 = r_joints_array[5]
        q7 = r_joints_array[6]

        c1 = np.cos(q1)
        c2 = np.cos(q2)
        c3 = np.cos(q3)
        c4 = np.cos(q4)
        c5 = np.cos(q5)
        c6 = np.cos(q6)
        c7 = np.cos(q7)

        s1 = np.sin(q1)
        s2 = np.sin(q2)
        s3 = np.sin(q3)
        s4 = np.sin(q4)
        s5 = np.sin(q5)
        s6 = np.sin(q6)
        s7 = np.sin(q7)

        # Computed in MATLAB Jacobian is:
        J_11 = -0.0969785488452206*(((-s1*c2*c3 - s3*c1)*c4 - s1*s2*s4)*c5 + (-s1*s3*c2 + c1*c3)*s5)*s6 + 0.0759828998122285*(((-s1*c2*c3 - s3*c1)*c4 - s1*s2*s4)*c5 + (-s1*s3*c2 + c1*c3)*s5)*c6 + 0.0759828998122285*((-s1*c2*c3 - s3*c1)*s4 + s1*s2*c4)*s6 + 0.0969785488452206*((-s1*c2*c3 - s3*c1)*s4 + s1*s2*c4)*c6 + 0.34254250774854*(-s1*c2*c3 - s3*c1)*s4 + 0.0774988411870877*(-s1*c2*c3 - s3*c1)*c4 - 0.0774988411870877*s1*s2*s4 + 0.34254250774854*s1*s2*c4 - 0.293*s1*s2 - 0.0525*s1*c2*c3 - 0.0525*s3*c1
        J_12 = -0.0969785488452206*((-s2*c1*c3*c4 + s4*c1*c2)*c5 - s2*s3*s5*c1)*s6 + 0.0759828998122285*((-s2*c1*c3*c4 + s4*c1*c2)*c5 - s2*s3*s5*c1)*c6 + 0.0759828998122285*(-s2*s4*c1*c3 - c1*c2*c4)*s6 + 0.0969785488452206*(-s2*s4*c1*c3 - c1*c2*c4)*c6 - 0.34254250774854*s2*s4*c1*c3 - 0.0774988411870877*s2*c1*c3*c4 - 0.0525*s2*c1*c3 + 0.0774988411870877*s4*c1*c2 - 0.34254250774854*c1*c2*c4 + 0.293*c1*c2
        J_13 = -0.0969785488452206*((-s1*s3 + c1*c2*c3)*s5 + (-s1*c3 - s3*c1*c2)*c4*c5)*s6 + 0.0759828998122285*((-s1*s3 + c1*c2*c3)*s5 + (-s1*c3 - s3*c1*c2)*c4*c5)*c6 + 0.0759828998122285*(-s1*c3 - s3*c1*c2)*s4*s6 + 0.0969785488452206*(-s1*c3 - s3*c1*c2)*s4*c6 + 0.34254250774854*(-s1*c3 - s3*c1*c2)*s4 + 0.0774988411870877*(-s1*c3 - s3*c1*c2)*c4 - 0.0525*s1*c3 - 0.0525*s3*c1*c2

        J_14 = -0.0969785488452206*(-(-s1*s3 + c1*c2*c3)*s4 + s2*c1*c4)*s6*c5 + 0.0759828998122285*(-(-s1*s3 + c1*c2*c3)*s4 + s2*c1*c4)*c5*c6 + 0.0759828998122285*((-s1*s3 + c1*c2*c3)*c4 + s2*s4*c1)*s6 + 0.0969785488452206*((-s1*s3 + c1*c2*c3)*c4 + s2*s4*c1)*c6 - 0.0774988411870877*(-s1*s3 + c1*c2*c3)*s4 + 0.34254250774854*(-s1*s3 + c1*c2*c3)*c4 + 0.34254250774854*s2*s4*c1 + 0.0774988411870877*s2*c1*c4

        J_15 = -0.0969785488452206*(-((-s1*s3 + c1*c2*c3)*c4 + s2*s4*c1)*s5 + (s1*c3 + s3*c1*c2)*c5)*s6 + 0.0759828998122285*(-((-s1*s3 + c1*c2*c3)*c4 + s2*s4*c1)*s5 + (s1*c3 + s3*c1*c2)*c5)*c6

        J_16 = -0.0759828998122285*(((-s1*s3 + c1*c2*c3)*c4 + s2*s4*c1)*c5 + (s1*c3 + s3*c1*c2)*s5)*s6 - 0.0969785488452206*(((-s1*s3 + c1*c2*c3)*c4 + s2*s4*c1)*c5 + (s1*c3 + s3*c1*c2)*s5)*c6 - 0.0969785488452206*((-s1*s3 + c1*c2*c3)*s4 - s2*c1*c4)*s6 + 0.0759828998122285*((-s1*s3 + c1*c2*c3)*s4 - s2*c1*c4)*c6

        J_17 = 0

        J_21 = -0.0969785488452206*(((-s1*s3 + c1*c2*c3)*c4 + s2*s4*c1)*c5 + (s1*c3 + s3*c1*c2)*s5)*s6 + 0.0759828998122285*(((-s1*s3 + c1*c2*c3)*c4 + s2*s4*c1)*c5 + (s1*c3 + s3*c1*c2)*s5)*c6 + 0.0759828998122285*((-s1*s3 + c1*c2*c3)*s4 - s2*c1*c4)*s6 + 0.0969785488452206*((-s1*s3 + c1*c2*c3)*s4 - s2*c1*c4)*c6 + 0.34254250774854*(-s1*s3 + c1*c2*c3)*s4 + 0.0774988411870877*(-s1*s3 + c1*c2*c3)*c4 - 0.0525*s1*s3 + 0.0774988411870877*s2*s4*c1 - 0.34254250774854*s2*c1*c4 + 0.293*s2*c1 + 0.0525*c1*c2*c3
        J_22 = -0.0969785488452206*((-s1*s2*c3*c4 + s1*s4*c2)*c5 - s1*s2*s3*s5)*s6 + 0.0759828998122285*((-s1*s2*c3*c4 + s1*s4*c2)*c5 - s1*s2*s3*s5)*c6 + 0.0759828998122285*(-s1*s2*s4*c3 - s1*c2*c4)*s6 + 0.0969785488452206*(-s1*s2*s4*c3 - s1*c2*c4)*c6 - 0.34254250774854*s1*s2*s4*c3 - 0.0774988411870877*s1*s2*c3*c4 - 0.0525*s1*s2*c3 + 0.0774988411870877*s1*s4*c2 - 0.34254250774854*s1*c2*c4 + 0.293*s1*c2
        J_23 = -0.0969785488452206*((-s1*s3*c2 + c1*c3)*c4*c5 + (s1*c2*c3 + s3*c1)*s5)*s6 + 0.0759828998122285*((-s1*s3*c2 + c1*c3)*c4*c5 + (s1*c2*c3 + s3*c1)*s5)*c6 + 0.0759828998122285*(-s1*s3*c2 + c1*c3)*s4*s6 + 0.0969785488452206*(-s1*s3*c2 + c1*c3)*s4*c6 + 0.34254250774854*(-s1*s3*c2 + c1*c3)*s4 + 0.0774988411870877*(-s1*s3*c2 + c1*c3)*c4 - 0.0525*s1*s3*c2 + 0.0525*c1*c3
        J_24 = -0.0969785488452206*(-(s1*c2*c3 + s3*c1)*s4 + s1*s2*c4)*s6*c5 + 0.0759828998122285*(-(s1*c2*c3 + s3*c1)*s4 + s1*s2*c4)*c5*c6 + 0.0759828998122285*((s1*c2*c3 + s3*c1)*c4 + s1*s2*s4)*s6 + 0.0969785488452206*((s1*c2*c3 + s3*c1)*c4 + s1*s2*s4)*c6 - 0.0774988411870877*(s1*c2*c3 + s3*c1)*s4 + 0.34254250774854*(s1*c2*c3 + s3*c1)*c4 + 0.34254250774854*s1*s2*s4 + 0.0774988411870877*s1*s2*c4
        J_25 = -0.0969785488452206*(-((s1*c2*c3 + s3*c1)*c4 + s1*s2*s4)*s5 + (s1*s3*c2 - c1*c3)*c5)*s6 + 0.0759828998122285*(-((s1*c2*c3 + s3*c1)*c4 + s1*s2*s4)*s5 + (s1*s3*c2 - c1*c3)*c5)*c6
        J_26 = -0.0759828998122285*(((s1*c2*c3 + s3*c1)*c4 + s1*s2*s4)*c5 + (s1*s3*c2 - c1*c3)*s5)*s6 - 0.0969785488452206*(((s1*c2*c3 + s3*c1)*c4 + s1*s2*s4)*c5 + (s1*s3*c2 - c1*c3)*s5)*c6 - 0.0969785488452206*((s1*c2*c3 + s3*c1)*s4 - s1*s2*c4)*s6 + 0.0759828998122285*((s1*c2*c3 + s3*c1)*s4 - s1*s2*c4)*c6
        J_27 = 0

        J_31 = 0

        J_32 = -0.0969785488452206*((-s2*s4 - c2*c3*c4)*c5 - s3*s5*c2)*s6 + 0.0759828998122285*((-s2*s4 - c2*c3*c4)*c5 - s3*s5*c2)*c6 + 0.0759828998122285*(s2*c4 - s4*c2*c3)*s6 + 0.0969785488452206*(s2*c4 - s4*c2*c3)*c6 - 0.0774988411870877*s2*s4 + 0.34254250774854*s2*c4 - 0.293*s2 - 0.34254250774854*s4*c2*c3 - 0.0774988411870877*c2*c3*c4 - 0.0525*c2*c3
        J_33 = -0.0969785488452206*(s2*s3*c4*c5 - s2*s5*c3)*s6 + 0.0759828998122285*(s2*s3*c4*c5 - s2*s5*c3)*c6 + 0.0759828998122285*s2*s3*s4*s6 + 0.0969785488452206*s2*s3*s4*c6 + 0.34254250774854*s2*s3*s4 + 0.0774988411870877*s2*s3*c4 + 0.0525*s2*s3
        J_34 = -0.0969785488452206*(s2*s4*c3 + c2*c4)*s6*c5 + 0.0759828998122285*(s2*s4*c3 + c2*c4)*c5*c6 + 0.0759828998122285*(-s2*c3*c4 + s4*c2)*s6 + 0.0969785488452206*(-s2*c3*c4 + s4*c2)*c6 + 0.0774988411870877*s2*s4*c3 - 0.34254250774854*s2*c3*c4 + 0.34254250774854*s4*c2 + 0.0774988411870877*c2*c4
        J_35 = -0.0969785488452206*(-(-s2*c3*c4 + s4*c2)*s5 - s2*s3*c5)*s6 + 0.0759828998122285*(-(-s2*c3*c4 + s4*c2)*s5 - s2*s3*c5)*c6
        J_36 = -0.0759828998122285*((-s2*c3*c4 + s4*c2)*c5 - s2*s3*s5)*s6 - 0.0969785488452206*((-s2*c3*c4 + s4*c2)*c5 - s2*s3*s5)*c6 - 0.0969785488452206*(-s2*s4*c3 - c2*c4)*s6 + 0.0759828998122285*(-s2*s4*c3 - c2*c4)*c6
        J_37 = 0

        J = np.matrix([ [ J_11 , J_12 , J_13 , J_14 , J_15 , J_16 , J_17 ],\
                        [ J_21 , J_22 , J_23 , J_24 , J_25 , J_26 , J_27 ],\
                        [ J_31 , J_32 , J_33 , J_34 , J_35 , J_36 , J_37 ]])
        return J

    def tf_A01(self, r_joints_array):
        q1 = (r_joints_array[0])
        c1 = np.cos(q1)
        s1 = np.sin(q1)
        tf = np.matrix([[c1 , -s1 , 0 , 0],\
                        [s1 , c1 , 0 , 0],\
                        [0 , 0 , 1 , self.l1],\
                        [0 , 0 , 0 , 1]])
        return tf

    def tf_A02(self, r_joints_array):
        q2 = (r_joints_array[1])
        c2 = np.cos(q2)
        s2 = np.sin(q2)
        tf_A12 = np.matrix([[c2,-s2,0,0],\
                            [0,0,1,0],\
                            [-s2,-c2,0,0],\
                            [0,0,0,1]])
        tf = np.dot( self.tf_A01(r_joints_array), tf_A12 )
        return tf

    def tf_A03(self, r_joints_array):
        q3 = (r_joints_array[2])
        c3 = np.cos(q3)
        s3 = np.sin(q3)
        tf_A23 = np.matrix([[c3,-s3,0,0],\
                            [0,0,-1,-self.l2],\
                            [s3,c3,0,0],\
                            [0,0,0,1]])

        tf = np.dot( self.tf_A02(r_joints_array), tf_A23 )
        return tf

    def tf_A04(self, r_joints_array):
        q4 = (r_joints_array[3])
        c4 = np.cos(q4)
        s4 = np.sin(q4)
        tf_A34 = np.matrix([[c4,-s4,0,self.l3],\
                            [0,0,-1,0],\
                            [s4,c4,0,0],\
                            [0,0,0,1]])
        tf = np.dot( self.tf_A03(r_joints_array), tf_A34 )
        return tf

    def tf_A05(self, r_joints_array):
        q5 = (r_joints_array[4])
        c5 = np.cos(q5)
        s5 = np.sin(q5)
        tf_A45 = np.matrix([[c5,-s5,0,self.l4*np.sin(self.theta1)],\
                            [0,0,-1,-self.l4*np.cos(self.theta1)],\
                            [s5,c5,0,0],\
                            [0,0,0,1]])

        tf = np.dot( self.tf_A04(r_joints_array), tf_A45 )
        return tf

    def tf_A06(self, r_joints_array):
        q6 = (r_joints_array[5])
        c6 = np.cos(q6)
        s6 = np.sin(q6)
        tf_A56 = np.matrix([[c6,-s6,0,0],\
                            [0,0,-1,0],\
                            [s6,c6,0,0],\
                            [0,0,0,1]])

        tf = np.dot( self.tf_A05(r_joints_array), tf_A56 )
        return tf

    def tf_A07(self, r_joints_array):
        q7 = (r_joints_array[6])
        c7 = np.cos(q7)
        s7 = np.sin(q7)
        tf_A67 = np.matrix([[c7,-s7,0,self.l5*np.sin(self.theta2)],\
                            [0,0,1,self.l5*np.cos(self.theta2)],\
                            [-s7,-c7,0,0],\
                            [0,0,0,1]])
        tf = np.dot( self.tf_A06(r_joints_array), tf_A67 )
        return tf

    '''
    Auxilliary matrices that indicate the positions 
    that the robot might hit the obstacles
    These matrices were found experimentally in simulations
    '''
    def tf_A04A(self,r_joints_array):
        tf_44A = np.matrix([[1,0,0,0],\
                            [0,1,0,0],\
                            [0,0,1,-0.069],\
                            [0,0,0,1]])
        tf = np.dot(self.tf_A04(r_joints_array),tf_44A)
        return tf

    def tf_A04B(self,r_joints_array):
        tf_44B = np.matrix([[1,0,0,0],\
                            [0,1,0,0],\
                            [0,0,1,0.10688],\
                            [0,0,0,1]])
        tf = np.dot(self.tf_A04(r_joints_array),tf_44B)
        return tf
    
    def tf_A04C(self,r_joints_array):
        tf_4B4C = np.matrix([[np.cos(-np.pi/4),np.sin(-np.pi/4),0,np.cos(-np.pi/4)*(0.126/2)],\
                            [np.sin(-np.pi/4),np.cos(-np.pi/4),0,np.sin(-np.pi/4)*(0.126/2)],\
                            [0,0,1,0],\
                            [0,0,0,1]])
        tf = np.dot(self.tf_A04B(r_joints_array),tf_4B4C)
        return tf

    def tf_A04D(self,r_joints_array):
        tf_4C4D = np.matrix([[np.cos(-np.pi/4),np.sin(-np.pi/4),0,np.cos(-np.pi/4)*(0.126)],\
                            [np.sin(-np.pi/4),np.cos(-np.pi/4),0,np.sin(-np.pi/4)*(0.126)],\
                            [0,0,1,0],\
                            [0,0,0,1]])
        tf = np.dot(self.tf_A04C(r_joints_array),tf_4C4D)
        return tf

    def tf_A04E(self,r_joints_array):
        tf_4D4E = np.matrix([[1,0,0,0],\
                            [0,1,0,0],\
                            [0,0,1,-0.10688-0.042],\
                            [0,0,0,1]])
        tf = np.dot(self.tf_A04D(r_joints_array),tf_4D4E)
        return tf
    
    def tf_A04F(self,r_joints_array):
        tf_4E4F = np.matrix([[np.cos(np.pi/4) ,np.sin(np.pi/4) , 0 ,np.cos(np.pi/4)*(0.126/2)],\
                            [-np.sin(np.pi/4) ,np.cos(np.pi/4) , 0 , -np.sin(np.pi/4)*(0.126/2)],\
                            [0 , 0 , 1 , -0.069/2],\
                            [0 , 0 , 0 , 1]])
        tf = np.dot( self.tf_A04(r_joints_array), tf_4E4F )
        return tf


    def pointA_function(self, r_joints_array,ypos):

        q1 = r_joints_array[0]
        q2 = r_joints_array[1]
        q3 = r_joints_array[2]
        q4 = r_joints_array[3]
        q5 = r_joints_array[4]
        q6 = r_joints_array[5]
        q7 = r_joints_array[6]

        c1 = np.cos(q1)
        c2 = np.cos(q2)
        c3 = np.cos(q3)
        c4 = np.cos(q4)
        c5 = np.cos(q5)
        c6 = np.cos(q6)
        c7 = np.cos(q7)

        s1 = np.sin(q1)
        s2 = np.sin(q2)
        s3 = np.sin(q3)
        s4 = np.sin(q4)
        s5 = np.sin(q5)
        s6 = np.sin(q6)
        s7 = np.sin(q7)


        q1_dot=(0.045*(-1.95333333333333*s1*s2 + 0.46*s1*s3*c2 - 0.35*s1*c2*c3 - 0.35*s3*c1 - 0.46*c1*c3)*(-0.175*s1*s3 - 0.23*s1*c3 + 0.976666666666667*s2*c1 - 0.23*s3*c1*c2 + 0.175*c1*c2*c3 - 1) + (-0.105*s1*s3 - 0.138*s1*c3 + 0.586*s2*c1 - 0.138*s3*c1*c2 + 0.105*c1*c2*c3)*(-ypos + 0.293*s1*s2 - 0.069*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 + 0.069*c1*c3)/2)/np.sqrt((-ypos + 0.293*s1*s2 - 0.069*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 + 0.069*c1*c3)**2 + 0.09*(-0.175*s1*s3 - 0.23*s1*c3 + 0.976666666666667*s2*c1 - 0.23*s3*c1*c2 + 0.175*c1*c2*c3 - 1)**2)

        q2_dot=((0.138*s1*s2*s3 - 0.105*s1*s2*c3 + 0.586*s1*c2)*(-ypos + 0.293*s1*s2 - 0.069*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 + 0.069*c1*c3)/2 + 0.045*(0.46*s2*s3*c1 - 0.35*s2*c1*c3 + 1.95333333333333*c1*c2)*(-0.175*s1*s3 - 0.23*s1*c3 + 0.976666666666667*s2*c1 - 0.23*s3*c1*c2 + 0.175*c1*c2*c3 - 1))/np.sqrt((-ypos + 0.293*s1*s2 - 0.069*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 + 0.069*c1*c3)**2 + 0.09*(-0.175*s1*s3 - 0.23*s1*c3 + 0.976666666666667*s2*c1 - 0.23*s3*c1*c2 + 0.175*c1*c2*c3 - 1)**2)

        q3_dot=(0.045*(0.46*s1*s3 - 0.35*s1*c3 - 0.35*s3*c1*c2 - 0.46*c1*c2*c3)*(-0.175*s1*s3 - 0.23*s1*c3 + 0.976666666666667*s2*c1 - 0.23*s3*c1*c2 + 0.175*c1*c2*c3 - 1) + (-0.105*s1*s3*c2 - 0.138*s1*c2*c3 - 0.138*s3*c1 + 0.105*c1*c3)*(-ypos + 0.293*s1*s2 - 0.069*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 + 0.069*c1*c3)/2)/np.sqrt((-ypos + 0.293*s1*s2 - 0.069*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 + 0.069*c1*c3)**2 + 0.09*(-0.175*s1*s3 - 0.23*s1*c3 + 0.976666666666667*s2*c1 - 0.23*s3*c1*c2 + 0.175*c1*c2*c3 - 1)**2)

        return np.array([q1_dot,q2_dot,q3_dot,0,0,0,0],dtype='float')


    def pointB_function(self, r_joints_array,ypos):

        q1 = r_joints_array[0]
        q2 = r_joints_array[1]
        q3 = r_joints_array[2]
        q4 = r_joints_array[3]
        q5 = r_joints_array[4]
        q6 = r_joints_array[5]
        q7 = r_joints_array[6]

        c1 = np.cos(q1)
        c2 = np.cos(q2)
        c3 = np.cos(q3)
        c4 = np.cos(q4)
        c5 = np.cos(q5)
        c6 = np.cos(q6)
        c7 = np.cos(q7)

        s1 = np.sin(q1)
        s2 = np.sin(q2)
        s3 = np.sin(q3)
        s4 = np.sin(q4)
        s5 = np.sin(q5)
        s6 = np.sin(q6)
        s7 = np.sin(q7)


        q1_dot=(0.045*(-1.95333333333333*s1*s2 - 0.712533333333333*s1*s3*c2 - 0.35*s1*c2*c3 - 0.35*s3*c1 + 0.712533333333333*c1*c3)*(-0.175*s1*s3 + 0.356266666666667*s1*c3 + 0.976666666666667*s2*c1 + 0.356266666666667*s3*c1*c2 + 0.175*c1*c2*c3 - 1) + (-0.105*s1*s3 + 0.21376*s1*c3 + 0.586*s2*c1 + 0.21376*s3*c1*c2 + 0.105*c1*c2*c3)*(-ypos + 0.293*s1*s2 + 0.10688*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 - 0.10688*c1*c3)/2)/np.sqrt((-ypos + 0.293*s1*s2 + 0.10688*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 - 0.10688*c1*c3)**2 + 0.09*(-0.175*s1*s3 + 0.356266666666667*s1*c3 + 0.976666666666667*s2*c1 + 0.356266666666667*s3*c1*c2 + 0.175*c1*c2*c3 - 1)**2)

        q2_dot=((-0.21376*s1*s2*s3 - 0.105*s1*s2*c3 + 0.586*s1*c2)*(-ypos + 0.293*s1*s2 + 0.10688*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 - 0.10688*c1*c3)/2 + 0.045*(-0.712533333333333*s2*s3*c1 - 0.35*s2*c1*c3 + 1.95333333333333*c1*c2)*(-0.175*s1*s3 + 0.356266666666667*s1*c3 + 0.976666666666667*s2*c1 + 0.356266666666667*s3*c1*c2 + 0.175*c1*c2*c3 - 1))/np.sqrt((-ypos + 0.293*s1*s2 + 0.10688*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 - 0.10688*c1*c3)**2 + 0.09*(-0.175*s1*s3 + 0.356266666666667*s1*c3 + 0.976666666666667*s2*c1 + 0.356266666666667*s3*c1*c2 + 0.175*c1*c2*c3 - 1)**2)

        q3_dot=(0.045*(-0.712533333333333*s1*s3 - 0.35*s1*c3 - 0.35*s3*c1*c2 + 0.712533333333333*c1*c2*c3)*(-0.175*s1*s3 + 0.356266666666667*s1*c3 + 0.976666666666667*s2*c1 + 0.356266666666667*s3*c1*c2 + 0.175*c1*c2*c3 - 1) + (-0.105*s1*s3*c2 + 0.21376*s1*c2*c3 + 0.21376*s3*c1 + 0.105*c1*c3)*(-ypos + 0.293*s1*s2 + 0.10688*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 - 0.10688*c1*c3)/2)/np.sqrt((-ypos + 0.293*s1*s2 + 0.10688*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 - 0.10688*c1*c3)**2 + 0.09*(-0.175*s1*s3 + 0.356266666666667*s1*c3 + 0.976666666666667*s2*c1 + 0.356266666666667*s3*c1*c2 + 0.175*c1*c2*c3 - 1)**2)

        return np.array([q1_dot,q2_dot,q3_dot,0,0,0,0],dtype='float')


    def pointC_function(self, r_joints_array,ypos):

        q1 = r_joints_array[0]
        q2 = r_joints_array[1]
        q3 = r_joints_array[2]
        q4 = r_joints_array[3]
        q5 = r_joints_array[4]
        q6 = r_joints_array[5]
        q7 = r_joints_array[6]

        c1 = np.cos(q1)
        c2 = np.cos(q2)
        c3 = np.cos(q3)
        c4 = np.cos(q4)
        c5 = np.cos(q5)
        c6 = np.cos(q6)
        c7 = np.cos(q7)

        s1 = np.sin(q1)
        s2 = np.sin(q2)
        s3 = np.sin(q3)
        s4 = np.sin(q4)
        s5 = np.sin(q5)
        s6 = np.sin(q6)
        s7 = np.sin(q7)


        q1_dot=((2*(-0.0445477272147525*s1*s3 + 0.0445477272147525*c1*c2*c3)*s4 + 2*(-0.0445477272147525*s1*s3 + 0.0445477272147525*c1*c2*c3)*c4 - 0.105*s1*s3 + 0.21376*s1*c3 + 0.089095454429505*s2*s4*c1 - 0.089095454429505*s2*c1*c4 + 0.586*s2*c1 + 0.21376*s3*c1*c2 + 0.105*c1*c2*c3)*(-ypos + 0.0445477272147525*(s1*c2*c3 + s3*c1)*s4 + 0.0445477272147525*(s1*c2*c3 + s3*c1)*c4 + 0.0445477272147525*s1*s2*s4 - 0.0445477272147525*s1*s2*c4 + 0.293*s1*s2 + 0.10688*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 - 0.10688*c1*c3)/2 + 0.045*(2*(-0.148492424049175*s1*c2*c3 - 0.148492424049175*s3*c1)*s4 + 2*(-0.148492424049175*s1*c2*c3 - 0.148492424049175*s3*c1)*c4 - 0.29698484809835*s1*s2*s4 + 0.29698484809835*s1*s2*c4 - 1.95333333333333*s1*s2 - 0.712533333333333*s1*s3*c2 - 0.35*s1*c2*c3 - 0.35*s3*c1 + 0.712533333333333*c1*c3)*(0.148492424049175*(-s1*s3 + c1*c2*c3)*s4 + 0.148492424049175*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 + 0.356266666666667*s1*c3 + 0.148492424049175*s2*s4*c1 - 0.148492424049175*s2*c1*c4 + 0.976666666666667*s2*c1 + 0.356266666666667*s3*c1*c2 + 0.175*c1*c2*c3 - 1))/np.sqrt((-ypos + 0.0445477272147525*(s1*c2*c3 + s3*c1)*s4 + 0.0445477272147525*(s1*c2*c3 + s3*c1)*c4 + 0.0445477272147525*s1*s2*s4 - 0.0445477272147525*s1*s2*c4 + 0.293*s1*s2 + 0.10688*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 - 0.10688*c1*c3)**2 + 0.09*(0.148492424049175*(-s1*s3 + c1*c2*c3)*s4 + 0.148492424049175*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 + 0.356266666666667*s1*c3 + 0.148492424049175*s2*s4*c1 - 0.148492424049175*s2*c1*c4 + 0.976666666666667*s2*c1 + 0.356266666666667*s3*c1*c2 + 0.175*c1*c2*c3 - 1)**2)

        q2_dot=((-0.21376*s1*s2*s3 - 0.089095454429505*s1*s2*s4*c3 - 0.089095454429505*s1*s2*c3*c4 - 0.105*s1*s2*c3 + 0.089095454429505*s1*s4*c2 - 0.089095454429505*s1*c2*c4 + 0.586*s1*c2)*(-ypos + 0.0445477272147525*(s1*c2*c3 + s3*c1)*s4 + 0.0445477272147525*(s1*c2*c3 + s3*c1)*c4 + 0.0445477272147525*s1*s2*s4 - 0.0445477272147525*s1*s2*c4 + 0.293*s1*s2 + 0.10688*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 - 0.10688*c1*c3)/2 + 0.045*(-0.712533333333333*s2*s3*c1 - 0.29698484809835*s2*s4*c1*c3 - 0.29698484809835*s2*c1*c3*c4 - 0.35*s2*c1*c3 + 0.29698484809835*s4*c1*c2 - 0.29698484809835*c1*c2*c4 + 1.95333333333333*c1*c2)*(0.148492424049175*(-s1*s3 + c1*c2*c3)*s4 + 0.148492424049175*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 + 0.356266666666667*s1*c3 + 0.148492424049175*s2*s4*c1 - 0.148492424049175*s2*c1*c4 + 0.976666666666667*s2*c1 + 0.356266666666667*s3*c1*c2 + 0.175*c1*c2*c3 - 1))/np.sqrt((-ypos + 0.0445477272147525*(s1*c2*c3 + s3*c1)*s4 + 0.0445477272147525*(s1*c2*c3 + s3*c1)*c4 + 0.0445477272147525*s1*s2*s4 - 0.0445477272147525*s1*s2*c4 + 0.293*s1*s2 + 0.10688*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 - 0.10688*c1*c3)**2 + 0.09*(0.148492424049175*(-s1*s3 + c1*c2*c3)*s4 + 0.148492424049175*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 + 0.356266666666667*s1*c3 + 0.148492424049175*s2*s4*c1 - 0.148492424049175*s2*c1*c4 + 0.976666666666667*s2*c1 + 0.356266666666667*s3*c1*c2 + 0.175*c1*c2*c3 - 1)**2)

        q3_dot=(0.045*(2*(-0.148492424049175*s1*c3 - 0.148492424049175*s3*c1*c2)*s4 + 2*(-0.148492424049175*s1*c3 - 0.148492424049175*s3*c1*c2)*c4 - 0.712533333333333*s1*s3 - 0.35*s1*c3 - 0.35*s3*c1*c2 + 0.712533333333333*c1*c2*c3)*(0.148492424049175*(-s1*s3 + c1*c2*c3)*s4 + 0.148492424049175*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 + 0.356266666666667*s1*c3 + 0.148492424049175*s2*s4*c1 - 0.148492424049175*s2*c1*c4 + 0.976666666666667*s2*c1 + 0.356266666666667*s3*c1*c2 + 0.175*c1*c2*c3 - 1) + (2*(-0.0445477272147525*s1*s3*c2 + 0.0445477272147525*c1*c3)*s4 + 2*(-0.0445477272147525*s1*s3*c2 + 0.0445477272147525*c1*c3)*c4 - 0.105*s1*s3*c2 + 0.21376*s1*c2*c3 + 0.21376*s3*c1 + 0.105*c1*c3)*(-ypos + 0.0445477272147525*(s1*c2*c3 + s3*c1)*s4 + 0.0445477272147525*(s1*c2*c3 + s3*c1)*c4 + 0.0445477272147525*s1*s2*s4 - 0.0445477272147525*s1*s2*c4 + 0.293*s1*s2 + 0.10688*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 - 0.10688*c1*c3)/2)/np.sqrt((-ypos + 0.0445477272147525*(s1*c2*c3 + s3*c1)*s4 + 0.0445477272147525*(s1*c2*c3 + s3*c1)*c4 + 0.0445477272147525*s1*s2*s4 - 0.0445477272147525*s1*s2*c4 + 0.293*s1*s2 + 0.10688*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 - 0.10688*c1*c3)**2 + 0.09*(0.148492424049175*(-s1*s3 + c1*c2*c3)*s4 + 0.148492424049175*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 + 0.356266666666667*s1*c3 + 0.148492424049175*s2*s4*c1 - 0.148492424049175*s2*c1*c4 + 0.976666666666667*s2*c1 + 0.356266666666667*s3*c1*c2 + 0.175*c1*c2*c3 - 1)**2)

        q4_dot=(0.045*(-2*(-0.148492424049175*s1*s3 + 0.148492424049175*c1*c2*c3)*s4 + 2*(-0.148492424049175*s1*s3 + 0.148492424049175*c1*c2*c3)*c4 + 0.29698484809835*s2*s4*c1 + 0.29698484809835*s2*c1*c4)*(0.148492424049175*(-s1*s3 + c1*c2*c3)*s4 + 0.148492424049175*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 + 0.356266666666667*s1*c3 + 0.148492424049175*s2*s4*c1 - 0.148492424049175*s2*c1*c4 + 0.976666666666667*s2*c1 + 0.356266666666667*s3*c1*c2 + 0.175*c1*c2*c3 - 1) + (-2*(0.0445477272147525*s1*c2*c3 + 0.0445477272147525*s3*c1)*s4 + 2*(0.0445477272147525*s1*c2*c3 + 0.0445477272147525*s3*c1)*c4 + 0.089095454429505*s1*s2*s4 + 0.089095454429505*s1*s2*c4)*(-ypos + 0.0445477272147525*(s1*c2*c3 + s3*c1)*s4 + 0.0445477272147525*(s1*c2*c3 + s3*c1)*c4 + 0.0445477272147525*s1*s2*s4 - 0.0445477272147525*s1*s2*c4 + 0.293*s1*s2 + 0.10688*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 - 0.10688*c1*c3)/2)/np.sqrt((-ypos + 0.0445477272147525*(s1*c2*c3 + s3*c1)*s4 + 0.0445477272147525*(s1*c2*c3 + s3*c1)*c4 + 0.0445477272147525*s1*s2*s4 - 0.0445477272147525*s1*s2*c4 + 0.293*s1*s2 + 0.10688*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 - 0.10688*c1*c3)**2 + 0.09*(0.148492424049175*(-s1*s3 + c1*c2*c3)*s4 + 0.148492424049175*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 + 0.356266666666667*s1*c3 + 0.148492424049175*s2*s4*c1 - 0.148492424049175*s2*c1*c4 + 0.976666666666667*s2*c1 + 0.356266666666667*s3*c1*c2 + 0.175*c1*c2*c3 - 1)**2)

        return np.array([q1_dot,q2_dot,q3_dot,q4_dot,0,0,0],dtype='float')


    def pointD_function(self, r_joints_array,ypos):

        q1 = r_joints_array[0]
        q2 = r_joints_array[1]
        q3 = r_joints_array[2]
        q4 = r_joints_array[3]
        q5 = r_joints_array[4]
        q6 = r_joints_array[5]
        q7 = r_joints_array[6]

        c1 = np.cos(q1)
        c2 = np.cos(q2)
        c3 = np.cos(q3)
        c4 = np.cos(q4)
        c5 = np.cos(q5)
        c6 = np.cos(q6)
        c7 = np.cos(q7)

        s1 = np.sin(q1)
        s2 = np.sin(q2)
        s3 = np.sin(q3)
        s4 = np.sin(q4)
        s5 = np.sin(q5)
        s6 = np.sin(q6)
        s7 = np.sin(q7)


        q1_dot=((2*(-0.089095454429505*s1*s3 + 0.089095454429505*c1*c2*c3)*s4 + 2*(-0.089095454429505*s1*s3 + 0.089095454429505*c1*c2*c3)*c4 - 0.105*s1*s3 + 0.21376*s1*c3 + 0.17819090885901*s2*s4*c1 - 0.17819090885901*s2*c1*c4 + 0.586*s2*c1 + 0.21376*s3*c1*c2 + 0.105*c1*c2*c3)*(-ypos + 0.089095454429505*(s1*c2*c3 + s3*c1)*s4 + 0.089095454429505*(s1*c2*c3 + s3*c1)*c4 + 0.089095454429505*s1*s2*s4 - 0.089095454429505*s1*s2*c4 + 0.293*s1*s2 + 0.10688*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 - 0.10688*c1*c3)/2 + 0.045*(2*(-0.29698484809835*s1*c2*c3 - 0.29698484809835*s3*c1)*s4 + 2*(-0.29698484809835*s1*c2*c3 - 0.29698484809835*s3*c1)*c4 - 0.5939696961967*s1*s2*s4 + 0.5939696961967*s1*s2*c4 - 1.95333333333333*s1*s2 - 0.712533333333333*s1*s3*c2 - 0.35*s1*c2*c3 - 0.35*s3*c1 + 0.712533333333333*c1*c3)*(0.29698484809835*(-s1*s3 + c1*c2*c3)*s4 + 0.29698484809835*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 + 0.356266666666667*s1*c3 + 0.29698484809835*s2*s4*c1 - 0.29698484809835*s2*c1*c4 + 0.976666666666667*s2*c1 + 0.356266666666667*s3*c1*c2 + 0.175*c1*c2*c3 - 1))/np.sqrt((-ypos + 0.089095454429505*(s1*c2*c3 + s3*c1)*s4 + 0.089095454429505*(s1*c2*c3 + s3*c1)*c4 + 0.089095454429505*s1*s2*s4 - 0.089095454429505*s1*s2*c4 + 0.293*s1*s2 + 0.10688*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 - 0.10688*c1*c3)**2 + 0.09*(0.29698484809835*(-s1*s3 + c1*c2*c3)*s4 + 0.29698484809835*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 + 0.356266666666667*s1*c3 + 0.29698484809835*s2*s4*c1 - 0.29698484809835*s2*c1*c4 + 0.976666666666667*s2*c1 + 0.356266666666667*s3*c1*c2 + 0.175*c1*c2*c3 - 1)**2)

        q2_dot=((-0.21376*s1*s2*s3 - 0.17819090885901*s1*s2*s4*c3 - 0.17819090885901*s1*s2*c3*c4 - 0.105*s1*s2*c3 + 0.17819090885901*s1*s4*c2 - 0.17819090885901*s1*c2*c4 + 0.586*s1*c2)*(-ypos + 0.089095454429505*(s1*c2*c3 + s3*c1)*s4 + 0.089095454429505*(s1*c2*c3 + s3*c1)*c4 + 0.089095454429505*s1*s2*s4 - 0.089095454429505*s1*s2*c4 + 0.293*s1*s2 + 0.10688*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 - 0.10688*c1*c3)/2 + 0.045*(-0.712533333333333*s2*s3*c1 - 0.5939696961967*s2*s4*c1*c3 - 0.5939696961967*s2*c1*c3*c4 - 0.35*s2*c1*c3 + 0.5939696961967*s4*c1*c2 - 0.5939696961967*c1*c2*c4 + 1.95333333333333*c1*c2)*(0.29698484809835*(-s1*s3 + c1*c2*c3)*s4 + 0.29698484809835*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 + 0.356266666666667*s1*c3 + 0.29698484809835*s2*s4*c1 - 0.29698484809835*s2*c1*c4 + 0.976666666666667*s2*c1 + 0.356266666666667*s3*c1*c2 + 0.175*c1*c2*c3 - 1))/np.sqrt((-ypos + 0.089095454429505*(s1*c2*c3 + s3*c1)*s4 + 0.089095454429505*(s1*c2*c3 + s3*c1)*c4 + 0.089095454429505*s1*s2*s4 - 0.089095454429505*s1*s2*c4 + 0.293*s1*s2 + 0.10688*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 - 0.10688*c1*c3)**2 + 0.09*(0.29698484809835*(-s1*s3 + c1*c2*c3)*s4 + 0.29698484809835*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 + 0.356266666666667*s1*c3 + 0.29698484809835*s2*s4*c1 - 0.29698484809835*s2*c1*c4 + 0.976666666666667*s2*c1 + 0.356266666666667*s3*c1*c2 + 0.175*c1*c2*c3 - 1)**2)

        q3_dot=(0.045*(2*(-0.29698484809835*s1*c3 - 0.29698484809835*s3*c1*c2)*s4 + 2*(-0.29698484809835*s1*c3 - 0.29698484809835*s3*c1*c2)*c4 - 0.712533333333333*s1*s3 - 0.35*s1*c3 - 0.35*s3*c1*c2 + 0.712533333333333*c1*c2*c3)*(0.29698484809835*(-s1*s3 + c1*c2*c3)*s4 + 0.29698484809835*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 + 0.356266666666667*s1*c3 + 0.29698484809835*s2*s4*c1 - 0.29698484809835*s2*c1*c4 + 0.976666666666667*s2*c1 + 0.356266666666667*s3*c1*c2 + 0.175*c1*c2*c3 - 1) + (2*(-0.089095454429505*s1*s3*c2 + 0.089095454429505*c1*c3)*s4 + 2*(-0.089095454429505*s1*s3*c2 + 0.089095454429505*c1*c3)*c4 - 0.105*s1*s3*c2 + 0.21376*s1*c2*c3 + 0.21376*s3*c1 + 0.105*c1*c3)*(-ypos + 0.089095454429505*(s1*c2*c3 + s3*c1)*s4 + 0.089095454429505*(s1*c2*c3 + s3*c1)*c4 + 0.089095454429505*s1*s2*s4 - 0.089095454429505*s1*s2*c4 + 0.293*s1*s2 + 0.10688*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 - 0.10688*c1*c3)/2)/np.sqrt((-ypos + 0.089095454429505*(s1*c2*c3 + s3*c1)*s4 + 0.089095454429505*(s1*c2*c3 + s3*c1)*c4 + 0.089095454429505*s1*s2*s4 - 0.089095454429505*s1*s2*c4 + 0.293*s1*s2 + 0.10688*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 - 0.10688*c1*c3)**2 + 0.09*(0.29698484809835*(-s1*s3 + c1*c2*c3)*s4 + 0.29698484809835*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 + 0.356266666666667*s1*c3 + 0.29698484809835*s2*s4*c1 - 0.29698484809835*s2*c1*c4 + 0.976666666666667*s2*c1 + 0.356266666666667*s3*c1*c2 + 0.175*c1*c2*c3 - 1)**2)
        q4_dot=(0.045*(-2*(-0.29698484809835*s1*s3 + 0.29698484809835*c1*c2*c3)*s4 + 2*(-0.29698484809835*s1*s3 + 0.29698484809835*c1*c2*c3)*c4 + 0.5939696961967*s2*s4*c1 + 0.5939696961967*s2*c1*c4)*(0.29698484809835*(-s1*s3 + c1*c2*c3)*s4 + 0.29698484809835*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 + 0.356266666666667*s1*c3 + 0.29698484809835*s2*s4*c1 - 0.29698484809835*s2*c1*c4 + 0.976666666666667*s2*c1 + 0.356266666666667*s3*c1*c2 + 0.175*c1*c2*c3 - 1) + (-2*(0.089095454429505*s1*c2*c3 + 0.089095454429505*s3*c1)*s4 + 2*(0.089095454429505*s1*c2*c3 + 0.089095454429505*s3*c1)*c4 + 0.17819090885901*s1*s2*s4 + 0.17819090885901*s1*s2*c4)*(-ypos + 0.089095454429505*(s1*c2*c3 + s3*c1)*s4 + 0.089095454429505*(s1*c2*c3 + s3*c1)*c4 + 0.089095454429505*s1*s2*s4 - 0.089095454429505*s1*s2*c4 + 0.293*s1*s2 + 0.10688*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 - 0.10688*c1*c3)/2)/np.sqrt((-ypos + 0.089095454429505*(s1*c2*c3 + s3*c1)*s4 + 0.089095454429505*(s1*c2*c3 + s3*c1)*c4 + 0.089095454429505*s1*s2*s4 - 0.089095454429505*s1*s2*c4 + 0.293*s1*s2 + 0.10688*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 - 0.10688*c1*c3)**2 + 0.09*(0.29698484809835*(-s1*s3 + c1*c2*c3)*s4 + 0.29698484809835*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 + 0.356266666666667*s1*c3 + 0.29698484809835*s2*s4*c1 - 0.29698484809835*s2*c1*c4 + 0.976666666666667*s2*c1 + 0.356266666666667*s3*c1*c2 + 0.175*c1*c2*c3 - 1)**2)

        return np.array([q1_dot,q2_dot,q3_dot,q4_dot,0,0,0],dtype='float')

    
    def pointE_function(self, r_joints_array,ypos):

        q1 = r_joints_array[0]
        q2 = r_joints_array[1]
        q3 = r_joints_array[2]
        q4 = r_joints_array[3]
        q5 = r_joints_array[4]
        q6 = r_joints_array[5]
        q7 = r_joints_array[6]

        c1 = np.cos(q1)
        c2 = np.cos(q2)
        c3 = np.cos(q3)
        c4 = np.cos(q4)
        c5 = np.cos(q5)
        c6 = np.cos(q6)
        c7 = np.cos(q7)

        s1 = np.sin(q1)
        s2 = np.sin(q2)
        s3 = np.sin(q3)
        s4 = np.sin(q4)
        s5 = np.sin(q5)
        s6 = np.sin(q6)
        s7 = np.sin(q7)


        q1_dot=((2*(-0.089095454429505*s1*s3 + 0.089095454429505*c1*c2*c3)*s4 + 2*(-0.089095454429505*s1*s3 + 0.089095454429505*c1*c2*c3)*c4 - 0.105*s1*s3 - 0.084*s1*c3 + 0.17819090885901*s2*s4*c1 - 0.17819090885901*s2*c1*c4 + 0.586*s2*c1 - 0.084*s3*c1*c2 + 0.105*c1*c2*c3)*(-ypos + 0.089095454429505*(s1*c2*c3 + s3*c1)*s4 + 0.089095454429505*(s1*c2*c3 + s3*c1)*c4 + 0.089095454429505*s1*s2*s4 - 0.089095454429505*s1*s2*c4 + 0.293*s1*s2 - 0.042*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 + 0.042*c1*c3)/2 + 0.045*(2*(-0.29698484809835*s1*c2*c3 - 0.29698484809835*s3*c1)*s4 + 2*(-0.29698484809835*s1*c2*c3 - 0.29698484809835*s3*c1)*c4 - 0.5939696961967*s1*s2*s4 + 0.5939696961967*s1*s2*c4 - 1.95333333333333*s1*s2 + 0.28*s1*s3*c2 - 0.35*s1*c2*c3 - 0.35*s3*c1 - 0.28*c1*c3)*(0.29698484809835*(-s1*s3 + c1*c2*c3)*s4 + 0.29698484809835*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 - 0.14*s1*c3 + 0.29698484809835*s2*s4*c1 - 0.29698484809835*s2*c1*c4 + 0.976666666666667*s2*c1 - 0.14*s3*c1*c2 + 0.175*c1*c2*c3 - 1))/np.sqrt((-ypos + 0.089095454429505*(s1*c2*c3 + s3*c1)*s4 + 0.089095454429505*(s1*c2*c3 + s3*c1)*c4 + 0.089095454429505*s1*s2*s4 - 0.089095454429505*s1*s2*c4 + 0.293*s1*s2 - 0.042*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 + 0.042*c1*c3)**2 + 0.09*(0.29698484809835*(-s1*s3 + c1*c2*c3)*s4 + 0.29698484809835*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 - 0.14*s1*c3 + 0.29698484809835*s2*s4*c1 - 0.29698484809835*s2*c1*c4 + 0.976666666666667*s2*c1 - 0.14*s3*c1*c2 + 0.175*c1*c2*c3 - 1)**2)

        q2_dot=((0.084*s1*s2*s3 - 0.17819090885901*s1*s2*s4*c3 - 0.17819090885901*s1*s2*c3*c4 - 0.105*s1*s2*c3 + 0.17819090885901*s1*s4*c2 - 0.17819090885901*s1*c2*c4 + 0.586*s1*c2)*(-ypos + 0.089095454429505*(s1*c2*c3 + s3*c1)*s4 + 0.089095454429505*(s1*c2*c3 + s3*c1)*c4 + 0.089095454429505*s1*s2*s4 - 0.089095454429505*s1*s2*c4 + 0.293*s1*s2 - 0.042*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 + 0.042*c1*c3)/2 + 0.045*(0.28*s2*s3*c1 - 0.5939696961967*s2*s4*c1*c3 - 0.5939696961967*s2*c1*c3*c4 - 0.35*s2*c1*c3 + 0.5939696961967*s4*c1*c2 - 0.5939696961967*c1*c2*c4 + 1.95333333333333*c1*c2)*(0.29698484809835*(-s1*s3 + c1*c2*c3)*s4 + 0.29698484809835*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 - 0.14*s1*c3 + 0.29698484809835*s2*s4*c1 - 0.29698484809835*s2*c1*c4 + 0.976666666666667*s2*c1 - 0.14*s3*c1*c2 + 0.175*c1*c2*c3 - 1))/np.sqrt((-ypos + 0.089095454429505*(s1*c2*c3 + s3*c1)*s4 + 0.089095454429505*(s1*c2*c3 + s3*c1)*c4 + 0.089095454429505*s1*s2*s4 - 0.089095454429505*s1*s2*c4 + 0.293*s1*s2 - 0.042*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 + 0.042*c1*c3)**2 + 0.09*(0.29698484809835*(-s1*s3 + c1*c2*c3)*s4 + 0.29698484809835*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 - 0.14*s1*c3 + 0.29698484809835*s2*s4*c1 - 0.29698484809835*s2*c1*c4 + 0.976666666666667*s2*c1 - 0.14*s3*c1*c2 + 0.175*c1*c2*c3 - 1)**2)

        q3_dot=(0.045*(2*(-0.29698484809835*s1*c3 - 0.29698484809835*s3*c1*c2)*s4 + 2*(-0.29698484809835*s1*c3 - 0.29698484809835*s3*c1*c2)*c4 + 0.28*s1*s3 - 0.35*s1*c3 - 0.35*s3*c1*c2 - 0.28*c1*c2*c3)*(0.29698484809835*(-s1*s3 + c1*c2*c3)*s4 + 0.29698484809835*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 - 0.14*s1*c3 + 0.29698484809835*s2*s4*c1 - 0.29698484809835*s2*c1*c4 + 0.976666666666667*s2*c1 - 0.14*s3*c1*c2 + 0.175*c1*c2*c3 - 1) + (2*(-0.089095454429505*s1*s3*c2 + 0.089095454429505*c1*c3)*s4 + 2*(-0.089095454429505*s1*s3*c2 + 0.089095454429505*c1*c3)*c4 - 0.105*s1*s3*c2 - 0.084*s1*c2*c3 - 0.084*s3*c1 + 0.105*c1*c3)*(-ypos + 0.089095454429505*(s1*c2*c3 + s3*c1)*s4 + 0.089095454429505*(s1*c2*c3 + s3*c1)*c4 + 0.089095454429505*s1*s2*s4 - 0.089095454429505*s1*s2*c4 + 0.293*s1*s2 - 0.042*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 + 0.042*c1*c3)/2)/np.sqrt((-ypos + 0.089095454429505*(s1*c2*c3 + s3*c1)*s4 + 0.089095454429505*(s1*c2*c3 + s3*c1)*c4 + 0.089095454429505*s1*s2*s4 - 0.089095454429505*s1*s2*c4 + 0.293*s1*s2 - 0.042*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 + 0.042*c1*c3)**2 + 0.09*(0.29698484809835*(-s1*s3 + c1*c2*c3)*s4 + 0.29698484809835*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 - 0.14*s1*c3 + 0.29698484809835*s2*s4*c1 - 0.29698484809835*s2*c1*c4 + 0.976666666666667*s2*c1 - 0.14*s3*c1*c2 + 0.175*c1*c2*c3 - 1)**2)

        q4_dot=(0.045*(-2*(-0.29698484809835*s1*s3 + 0.29698484809835*c1*c2*c3)*s4 + 2*(-0.29698484809835*s1*s3 + 0.29698484809835*c1*c2*c3)*c4 + 0.5939696961967*s2*s4*c1 + 0.5939696961967*s2*c1*c4)*(0.29698484809835*(-s1*s3 + c1*c2*c3)*s4 + 0.29698484809835*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 - 0.14*s1*c3 + 0.29698484809835*s2*s4*c1 - 0.29698484809835*s2*c1*c4 + 0.976666666666667*s2*c1 - 0.14*s3*c1*c2 + 0.175*c1*c2*c3 - 1) + (-2*(0.089095454429505*s1*c2*c3 + 0.089095454429505*s3*c1)*s4 + 2*(0.089095454429505*s1*c2*c3 + 0.089095454429505*s3*c1)*c4 + 0.17819090885901*s1*s2*s4 + 0.17819090885901*s1*s2*c4)*(-ypos + 0.089095454429505*(s1*c2*c3 + s3*c1)*s4 + 0.089095454429505*(s1*c2*c3 + s3*c1)*c4 + 0.089095454429505*s1*s2*s4 - 0.089095454429505*s1*s2*c4 + 0.293*s1*s2 - 0.042*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 + 0.042*c1*c3)/2)/np.sqrt((-ypos + 0.089095454429505*(s1*c2*c3 + s3*c1)*s4 + 0.089095454429505*(s1*c2*c3 + s3*c1)*c4 + 0.089095454429505*s1*s2*s4 - 0.089095454429505*s1*s2*c4 + 0.293*s1*s2 - 0.042*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 + 0.042*c1*c3)**2 + 0.09*(0.29698484809835*(-s1*s3 + c1*c2*c3)*s4 + 0.29698484809835*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 - 0.14*s1*c3 + 0.29698484809835*s2*s4*c1 - 0.29698484809835*s2*c1*c4 + 0.976666666666667*s2*c1 - 0.14*s3*c1*c2 + 0.175*c1*c2*c3 - 1)**2)

        return np.array([q1_dot,q2_dot,q3_dot,q4_dot,0,0,0],dtype='float')

    
    def pointF_function(self, r_joints_array,ypos):

        q1 = r_joints_array[0]
        q2 = r_joints_array[1]
        q3 = r_joints_array[2]
        q4 = r_joints_array[3]
        q5 = r_joints_array[4]
        q6 = r_joints_array[5]
        q7 = r_joints_array[6]

        c1 = np.cos(q1)
        c2 = np.cos(q2)
        c3 = np.cos(q3)
        c4 = np.cos(q4)
        c5 = np.cos(q5)
        c6 = np.cos(q6)
        c7 = np.cos(q7)

        s1 = np.sin(q1)
        s2 = np.sin(q2)
        s3 = np.sin(q3)
        s4 = np.sin(q4)
        s5 = np.sin(q5)
        s6 = np.sin(q6)
        s7 = np.sin(q7)


        q1_dot=((2*(-0.0445477272147525*s1*s3 + 0.0445477272147525*c1*c2*c3)*s4 + 2*(-0.0445477272147525*s1*s3 + 0.0445477272147525*c1*c2*c3)*c4 - 0.105*s1*s3 - 0.069*s1*c3 + 0.089095454429505*s2*s4*c1 - 0.089095454429505*s2*c1*c4 + 0.586*s2*c1 - 0.069*s3*c1*c2 + 0.105*c1*c2*c3)*(-ypos + 0.0445477272147525*(s1*c2*c3 + s3*c1)*s4 + 0.0445477272147525*(s1*c2*c3 + s3*c1)*c4 + 0.0445477272147525*s1*s2*s4 - 0.0445477272147525*s1*s2*c4 + 0.293*s1*s2 - 0.0345*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 + 0.0345*c1*c3)/2 + 0.045*(2*(-0.148492424049175*s1*c2*c3 - 0.148492424049175*s3*c1)*s4 + 2*(-0.148492424049175*s1*c2*c3 - 0.148492424049175*s3*c1)*c4 - 0.29698484809835*s1*s2*s4 + 0.29698484809835*s1*s2*c4 - 1.95333333333333*s1*s2 + 0.23*s1*s3*c2 - 0.35*s1*c2*c3 - 0.35*s3*c1 - 0.23*c1*c3)*(0.148492424049175*(-s1*s3 + c1*c2*c3)*s4 + 0.148492424049175*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 - 0.115*s1*c3 + 0.148492424049175*s2*s4*c1 - 0.148492424049175*s2*c1*c4 + 0.976666666666667*s2*c1 - 0.115*s3*c1*c2 + 0.175*c1*c2*c3 - 1))/np.sqrt((-ypos + 0.0445477272147525*(s1*c2*c3 + s3*c1)*s4 + 0.0445477272147525*(s1*c2*c3 + s3*c1)*c4 + 0.0445477272147525*s1*s2*s4 - 0.0445477272147525*s1*s2*c4 + 0.293*s1*s2 - 0.0345*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 + 0.0345*c1*c3)**2 + 0.09*(0.148492424049175*(-s1*s3 + c1*c2*c3)*s4 + 0.148492424049175*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 - 0.115*s1*c3 + 0.148492424049175*s2*s4*c1 - 0.148492424049175*s2*c1*c4 + 0.976666666666667*s2*c1 - 0.115*s3*c1*c2 + 0.175*c1*c2*c3 - 1)**2)

        q2_dot=((0.069*s1*s2*s3 - 0.089095454429505*s1*s2*s4*c3 - 0.089095454429505*s1*s2*c3*c4 - 0.105*s1*s2*c3 + 0.089095454429505*s1*s4*c2 - 0.089095454429505*s1*c2*c4 + 0.586*s1*c2)*(-ypos + 0.0445477272147525*(s1*c2*c3 + s3*c1)*s4 + 0.0445477272147525*(s1*c2*c3 + s3*c1)*c4 + 0.0445477272147525*s1*s2*s4 - 0.0445477272147525*s1*s2*c4 + 0.293*s1*s2 - 0.0345*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 + 0.0345*c1*c3)/2 + 0.045*(0.23*s2*s3*c1 - 0.29698484809835*s2*s4*c1*c3 - 0.29698484809835*s2*c1*c3*c4 - 0.35*s2*c1*c3 + 0.29698484809835*s4*c1*c2 - 0.29698484809835*c1*c2*c4 + 1.95333333333333*c1*c2)*(0.148492424049175*(-s1*s3 + c1*c2*c3)*s4 + 0.148492424049175*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 - 0.115*s1*c3 + 0.148492424049175*s2*s4*c1 - 0.148492424049175*s2*c1*c4 + 0.976666666666667*s2*c1 - 0.115*s3*c1*c2 + 0.175*c1*c2*c3 - 1))/np.sqrt((-ypos + 0.0445477272147525*(s1*c2*c3 + s3*c1)*s4 + 0.0445477272147525*(s1*c2*c3 + s3*c1)*c4 + 0.0445477272147525*s1*s2*s4 - 0.0445477272147525*s1*s2*c4 + 0.293*s1*s2 - 0.0345*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 + 0.0345*c1*c3)**2 + 0.09*(0.148492424049175*(-s1*s3 + c1*c2*c3)*s4 + 0.148492424049175*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 - 0.115*s1*c3 + 0.148492424049175*s2*s4*c1 - 0.148492424049175*s2*c1*c4 + 0.976666666666667*s2*c1 - 0.115*s3*c1*c2 + 0.175*c1*c2*c3 - 1)**2)

        q3_dot=(0.045*(2*(-0.148492424049175*s1*c3 - 0.148492424049175*s3*c1*c2)*s4 + 2*(-0.148492424049175*s1*c3 - 0.148492424049175*s3*c1*c2)*c4 + 0.23*s1*s3 - 0.35*s1*c3 - 0.35*s3*c1*c2 - 0.23*c1*c2*c3)*(0.148492424049175*(-s1*s3 + c1*c2*c3)*s4 + 0.148492424049175*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 - 0.115*s1*c3 + 0.148492424049175*s2*s4*c1 - 0.148492424049175*s2*c1*c4 + 0.976666666666667*s2*c1 - 0.115*s3*c1*c2 + 0.175*c1*c2*c3 - 1) + (2*(-0.0445477272147525*s1*s3*c2 + 0.0445477272147525*c1*c3)*s4 + 2*(-0.0445477272147525*s1*s3*c2 + 0.0445477272147525*c1*c3)*c4 - 0.105*s1*s3*c2 - 0.069*s1*c2*c3 - 0.069*s3*c1 + 0.105*c1*c3)*(-ypos + 0.0445477272147525*(s1*c2*c3 + s3*c1)*s4 + 0.0445477272147525*(s1*c2*c3 + s3*c1)*c4 + 0.0445477272147525*s1*s2*s4 - 0.0445477272147525*s1*s2*c4 + 0.293*s1*s2 - 0.0345*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 + 0.0345*c1*c3)/2)/np.sqrt((-ypos + 0.0445477272147525*(s1*c2*c3 + s3*c1)*s4 + 0.0445477272147525*(s1*c2*c3 + s3*c1)*c4 + 0.0445477272147525*s1*s2*s4 - 0.0445477272147525*s1*s2*c4 + 0.293*s1*s2 - 0.0345*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 + 0.0345*c1*c3)**2 + 0.09*(0.148492424049175*(-s1*s3 + c1*c2*c3)*s4 + 0.148492424049175*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 - 0.115*s1*c3 + 0.148492424049175*s2*s4*c1 - 0.148492424049175*s2*c1*c4 + 0.976666666666667*s2*c1 - 0.115*s3*c1*c2 + 0.175*c1*c2*c3 - 1)**2)

        q4_dot=(0.045*(-2*(-0.148492424049175*s1*s3 + 0.148492424049175*c1*c2*c3)*s4 + 2*(-0.148492424049175*s1*s3 + 0.148492424049175*c1*c2*c3)*c4 + 0.29698484809835*s2*s4*c1 + 0.29698484809835*s2*c1*c4)*(0.148492424049175*(-s1*s3 + c1*c2*c3)*s4 + 0.148492424049175*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 - 0.115*s1*c3 + 0.148492424049175*s2*s4*c1 - 0.148492424049175*s2*c1*c4 + 0.976666666666667*s2*c1 - 0.115*s3*c1*c2 + 0.175*c1*c2*c3 - 1) + (-2*(0.0445477272147525*s1*c2*c3 + 0.0445477272147525*s3*c1)*s4 + 2*(0.0445477272147525*s1*c2*c3 + 0.0445477272147525*s3*c1)*c4 + 0.089095454429505*s1*s2*s4 + 0.089095454429505*s1*s2*c4)*(-ypos + 0.0445477272147525*(s1*c2*c3 + s3*c1)*s4 + 0.0445477272147525*(s1*c2*c3 + s3*c1)*c4 + 0.0445477272147525*s1*s2*s4 - 0.0445477272147525*s1*s2*c4 + 0.293*s1*s2 - 0.0345*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 + 0.0345*c1*c3)/2)/np.sqrt((-ypos + 0.0445477272147525*(s1*c2*c3 + s3*c1)*s4 + 0.0445477272147525*(s1*c2*c3 + s3*c1)*c4 + 0.0445477272147525*s1*s2*s4 - 0.0445477272147525*s1*s2*c4 + 0.293*s1*s2 - 0.0345*s1*s3*c2 + 0.0525*s1*c2*c3 + 0.0525*s3*c1 + 0.0345*c1*c3)**2 + 0.09*(0.148492424049175*(-s1*s3 + c1*c2*c3)*s4 + 0.148492424049175*(-s1*s3 + c1*c2*c3)*c4 - 0.175*s1*s3 - 0.115*s1*c3 + 0.148492424049175*s2*s4*c1 - 0.148492424049175*s2*c1*c4 + 0.976666666666667*s2*c1 - 0.115*s3*c1*c2 + 0.175*c1*c2*c3 - 1)**2)

        return np.array([q1_dot,q2_dot,q3_dot,q4_dot,0,0,0],dtype='float')
        
